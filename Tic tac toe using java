import java.util.Scanner;

public class TicTacToe {
    private static char[][] board = new char[3][3]; 

    public static void main(String[] args) {
        initializeBoard();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to Tic-Tac-Toe!");
        System.out.println("Tic-Tac-Toe is a classic two-player game played on a 3x3 grid.");
        System.out.println("Players take turns marking spaces in the grid with their symbol, usually 'X' and 'O',");
        System.out.println("with the goal of getting three of their symbols in a row, either horizontally, vertically, or diagonally.");
        System.out.println();

        printBoard();

        while (!isGameOver()) {
            humanMove(scanner);
            if (isGameOver()) break;
            aiMove();
            printBoard();
        }

        scanner.close();
    }

    private static void initializeBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
    }

    private static void printBoard() {
        System.out.println("-------------");
        for (int i = 0; i < 3; i++) {
            System.out.print("| ");
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    private static void humanMove(Scanner scanner) {
        int row, col;
        do {
            System.out.print("Enter your move (row[1-3] column[1-3]): ");
            row = scanner.nextInt() - 1;
            col = scanner.nextInt() - 1;
        } while (!isValidMove(row, col));
        board[row][col] = 'X';
    }

    private static boolean isValidMove(int row, int col) {
        return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ';
    }

    private static boolean isGameOver() {
        return hasWinner('X') || hasWinner('O') || isBoardFull();
    }

    private static boolean hasWinner(char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true; // Check rows
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true; // Check columns
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true; // Check diagonal
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true; // Check anti-diagonal
        return false;
    }

    private static boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') return false;
            }
        }
        return true;
    }

    private static void aiMove() {
        int row, col;
        do {
            row = (int) (Math.random() * 3);
            col = (int) (Math.random() * 3);
        } while (!isValidMove(row, col));
        board[row][col] = 'O';
        System.out.println("AI plays move: " + (row + 1) + " " + (col + 1));
    }
}
